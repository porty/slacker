// Code generated by go-bindata.
// sources:
// templates/form.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesFormHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x96\x5d\x57\xe3\x36\x13\xc7\xef\xf7\x53\x68\xf5\x5c\x3e\x75\xbc\xd9\xd0\x42\xf7\x58\x39\x87\xa6\x74\x81\xa5\x5d\x9a\x90\x2c\x5c\xf5\xc8\xd2\xc4\xd6\xa2\x17\x57\x1a\x27\xa4\x9c\x7c\xf7\x1e\xbf\x04\x07\x48\x03\xdb\x8b\xde\x80\x24\x6b\x66\x7e\xff\xf1\xcc\x38\xf7\xf7\x44\xc2\x5c\x59\x20\x74\xee\xbc\xa1\x64\xbd\x7e\x93\xbc\x95\x4e\xe0\xaa\x00\x92\xa3\xd1\xc3\x37\x49\xf3\x8f\x10\x42\x92\x1c\xb8\x6c\x96\xf5\xd6\x00\x72\x22\x72\xee\x03\x20\xa3\x25\xce\xa3\x23\xfa\xf4\x71\x8e\x58\x44\xf0\x67\xa9\x16\x8c\x5e\x47\xd3\xe3\x68\xe4\x4c\xc1\x51\xa5\x1a\x28\x11\xce\x22\x58\x64\xf4\xec\x84\x81\xcc\xe0\x99\xb5\xe5\x06\x18\x5d\x28\x58\x16\xce\xe3\x96\xc1\x52\x49\xcc\x99\x84\x85\x12\x10\xd5\x9b\xef\x88\xb2\x0a\x15\xd7\x51\x10\x5c\x03\xeb\x6f\x3b\x43\x85\x1a\x86\x13\xcd\xc5\x2d\x19\xe5\x1c\x11\x7c\x12\x37\x87\xdd\x25\xad\xec\x2d\xf1\xa0\x19\x0d\xb8\xd2\x10\x72\x00\xa4\x24\xf7\x30\x67\xb4\x92\x11\x3e\xc4\xb1\xe1\x77\x42\xda\x5e\xea\x1c\x06\xf4\xbc\xa8\x36\xc2\x99\xf8\xe1\x20\x1e\xf4\x06\xbd\xc3\x58\x84\xd0\x9d\xf5\x8c\xb2\x3d\x11\x02\x25\xca\x22\x64\x5e\xe1\x8a\xd1\x90\xf3\xc1\xd1\x41\xf4\xd3\xec\x46\xa9\xc9\xd9\x2f\xf0\xa9\x2f\x3f\x9a\xf3\xf1\xf1\xed\x4a\x94\xa7\xc7\xa7\xe3\x6c\xf0\xfe\xb3\x99\x8a\xe5\xf2\xd0\xd9\xc1\xf8\x46\x66\x07\x33\xfe\xff\x4b\x33\xb9\x0a\x7f\xc5\x9f\x7e\x38\x5a\xa4\xf2\xe4\x6b\x7e\x50\x52\x22\xbc\x0b\xc1\x79\x95\x29\xcb\x28\xb7\xce\xae\x8c\x2b\x03\xfd\x2f\x84\x45\x98\x83\x81\x7d\xf2\xfc\xe9\xca\xfd\xd6\x57\xe3\x30\xbb\x9e\x1d\xd8\x9f\xdf\x9d\x97\xa8\xed\x47\x1e\xf4\xe8\xbc\x1c\x1d\x96\xcb\xaf\xb2\xfc\xf2\xe3\x64\xe6\x2f\x16\xe3\x1b\xe7\x2e\x8b\xf7\xe9\x97\x9b\xcc\x64\xe7\xbf\x9f\x5d\x2f\x75\x3c\x29\x5e\x90\x97\xc4\x5d\x49\x26\xa9\x93\xab\x2d\xd5\x52\x2d\x88\xd0\x3c\x04\x46\xab\xb2\xe1\xca\x82\xa7\xc4\x3b\x0d\x8c\x1a\xae\xec\x56\x86\x9a\xe2\xee\xb7\x05\x72\x95\x2b\x9b\xbd\x4d\xe2\xbc\xff\xf8\xc6\xfd\x3d\x51\x73\xd2\x9b\x94\x42\x40\x08\xbf\x42\x08\x3c\x83\xaa\x65\x1e\xb9\xd9\x0a\xcb\x35\x78\x24\xf5\xdf\x28\x34\x56\x1b\x80\xfa\xf0\x09\x41\x1b\xe3\xa5\x00\xb1\x54\x8b\x67\x60\x60\x65\x75\x71\x17\xef\x89\xf7\xce\x7f\x23\xad\xe4\x36\xeb\xb2\xb5\x0f\x76\xaf\xf7\x57\xa3\x26\xd5\xf8\x21\x06\x30\x77\x92\xd1\xcb\xcf\x93\xab\x1d\xe1\x12\xcd\x53\xd0\x64\xee\x3c\xa3\x22\xe7\xd6\x82\xa6\xc3\xb1\x73\x26\x89\xeb\x27\xc3\x24\xf5\x3b\xac\x02\x68\x10\xd8\x8e\x92\x8d\x1d\x51\x72\xcb\xc9\x33\xa3\x16\xd5\x57\x69\x20\xbd\x51\x73\x2f\x3c\xd5\xf7\x28\x8c\x2b\x50\x39\x3b\xfc\x5f\x95\x14\xb2\x5e\x27\x71\x7b\xf0\x4f\xbe\xdb\x34\x3c\xf3\x13\x37\xbc\x3b\x84\x54\xea\xf6\x26\xa5\x0c\xe0\x2b\x99\x74\x38\x6d\x57\xfb\x33\xa3\x6c\x51\x6e\x12\xf3\x60\x5b\x67\xa6\xdb\x2d\xb8\x2e\x81\xd1\x4a\x55\xfb\x96\x7b\x1b\xe7\x64\xbd\xde\xf5\x96\x5e\xc4\x54\xc2\xd9\x3f\x4a\xaf\xe9\xf0\x4c\x38\x4b\xa6\xe3\x8b\xd7\x63\x3e\xd8\xd6\x98\xdd\x6e\x07\x66\xe5\x7c\x3a\xbe\xa8\x28\x49\x3d\xf7\xda\xaf\xc6\x07\x32\x78\x07\xe6\x5f\x91\x23\xdc\x21\x1d\x5e\xc1\x1d\xbe\x9e\xb8\xb6\xa9\x69\x9b\xd5\x0e\xd2\xca\xe1\x0e\xcc\xef\xbf\x09\xb3\x89\x59\x7d\xb8\x19\x0d\x65\x6a\x54\x17\x6b\x02\x56\xd2\x4d\x9b\xa7\x68\x49\x8a\x36\x92\x30\xe7\xa5\x7e\xda\xd6\x49\x5c\x75\xe2\xd6\x14\xed\x5a\x38\x89\x9b\x01\x9b\xc4\xcd\x2f\x82\xae\x86\xff\x0e\x00\x00\xff\xff\xa8\x03\xd0\x3f\x47\x08\x00\x00")

func templatesFormHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesFormHtml,
		"templates/form.html",
	)
}

func templatesFormHtml() (*asset, error) {
	bytes, err := templatesFormHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/form.html", size: 2119, mode: os.FileMode(420), modTime: time.Unix(1480462118, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/form.html": templatesFormHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"form.html": &bintree{templatesFormHtml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

